// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: teachers.sql

package sqlc

import (
	"context"
)

const createTeacher = `-- name: CreateTeacher :one
insert into teachers
    (name, email)
values
    ($1 , $2)
    returning id, name, email
`

type CreateTeacherParams struct {
	Name  string
	Email string
}

func (q *Queries) CreateTeacher(ctx context.Context, arg CreateTeacherParams) (Teacher, error) {
	row := q.db.QueryRow(ctx, createTeacher, arg.Name, arg.Email)
	var i Teacher
	err := row.Scan(&i.ID, &i.Name, &i.Email)
	return i, err
}

const getTeacherByEmail = `-- name: GetTeacherByEmail :one
select id, name, email
from teachers
where email = $1
`

func (q *Queries) GetTeacherByEmail(ctx context.Context, email string) (Teacher, error) {
	row := q.db.QueryRow(ctx, getTeacherByEmail, email)
	var i Teacher
	err := row.Scan(&i.ID, &i.Name, &i.Email)
	return i, err
}

const getTeacherById = `-- name: GetTeacherById :one
select id, name, email
from teachers
where id = $1
`

func (q *Queries) GetTeacherById(ctx context.Context, id int32) (Teacher, error) {
	row := q.db.QueryRow(ctx, getTeacherById, id)
	var i Teacher
	err := row.Scan(&i.ID, &i.Name, &i.Email)
	return i, err
}
