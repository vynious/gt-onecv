// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: teachers.sql

package sqlc

import (
	"context"
)

const createTeacher = `-- name: CreateTeacher :one
insert into teachers
    (name, email)
values
    ($1 , $2)
    returning id, name, email
`

type CreateTeacherParams struct {
	Name  string
	Email string
}

func (q *Queries) CreateTeacher(ctx context.Context, arg CreateTeacherParams) (Teacher, error) {
	row := q.db.QueryRow(ctx, createTeacher, arg.Name, arg.Email)
	var i Teacher
	err := row.Scan(&i.ID, &i.Name, &i.Email)
	return i, err
}

const deleteTeacher = `-- name: DeleteTeacher :one
delete from teachers
where id = $1
returning id, name, email
`

func (q *Queries) DeleteTeacher(ctx context.Context, id int32) (Teacher, error) {
	row := q.db.QueryRow(ctx, deleteTeacher, id)
	var i Teacher
	err := row.Scan(&i.ID, &i.Name, &i.Email)
	return i, err
}

const getAllTeachers = `-- name: GetAllTeachers :many


select id, name, email
from teachers
where id = $1
`

func (q *Queries) GetAllTeachers(ctx context.Context, id int32) ([]Teacher, error) {
	rows, err := q.db.Query(ctx, getAllTeachers, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Teacher
	for rows.Next() {
		var i Teacher
		if err := rows.Scan(&i.ID, &i.Name, &i.Email); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTeacherEmail = `-- name: UpdateTeacherEmail :one
update teachers
set email = $2
where id = $1
returning id, name, email
`

type UpdateTeacherEmailParams struct {
	ID    int32
	Email string
}

func (q *Queries) UpdateTeacherEmail(ctx context.Context, arg UpdateTeacherEmailParams) (Teacher, error) {
	row := q.db.QueryRow(ctx, updateTeacherEmail, arg.ID, arg.Email)
	var i Teacher
	err := row.Scan(&i.ID, &i.Name, &i.Email)
	return i, err
}
