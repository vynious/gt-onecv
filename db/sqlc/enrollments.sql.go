// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: enrollments.sql

package sqlc

import (
	"context"
)

const createEnrollment = `-- name: CreateEnrollment :one
INSERT INTO enrollments (teacher_id, student_id)
SELECT t.id, s.id
FROM teachers t, students s
WHERE t.email = $1 AND s.email = $2
    RETURNING id, student_id, teacher_id
`

type CreateEnrollmentParams struct {
	Email   string
	Email_2 string
}

func (q *Queries) CreateEnrollment(ctx context.Context, arg CreateEnrollmentParams) (Enrollment, error) {
	row := q.db.QueryRow(ctx, createEnrollment, arg.Email, arg.Email_2)
	var i Enrollment
	err := row.Scan(&i.ID, &i.StudentID, &i.TeacherID)
	return i, err
}

const getEnrollmentsByTeacherEmail = `-- name: GetEnrollmentsByTeacherEmail :many
SELECT e.id, e.student_id, s.name, s.email, s.is_suspended
FROM enrollments e
         JOIN students s ON e.student_id = s.id
         JOIN teachers t ON e.teacher_id = t.id
WHERE t.email = $1
`

type GetEnrollmentsByTeacherEmailRow struct {
	ID          int32
	StudentID   int32
	Name        string
	Email       string
	IsSuspended bool
}

func (q *Queries) GetEnrollmentsByTeacherEmail(ctx context.Context, email string) ([]GetEnrollmentsByTeacherEmailRow, error) {
	rows, err := q.db.Query(ctx, getEnrollmentsByTeacherEmail, email)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetEnrollmentsByTeacherEmailRow
	for rows.Next() {
		var i GetEnrollmentsByTeacherEmailRow
		if err := rows.Scan(
			&i.ID,
			&i.StudentID,
			&i.Name,
			&i.Email,
			&i.IsSuspended,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
