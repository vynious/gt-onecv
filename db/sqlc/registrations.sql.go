// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: registrations.sql

package sqlc

import (
	"context"
)

const createRegistration = `-- name: CreateRegistration :one
INSERT INTO registrations (teacher_id, student_id)
SELECT t.id, s.id
FROM teachers t, students s
WHERE t.email = $1 AND s.email = $2
    RETURNING id, student_id, teacher_id
`

type CreateRegistrationParams struct {
	Email   string
	Email_2 string
}

func (q *Queries) CreateRegistration(ctx context.Context, arg CreateRegistrationParams) (Registration, error) {
	row := q.db.QueryRow(ctx, createRegistration, arg.Email, arg.Email_2)
	var i Registration
	err := row.Scan(&i.ID, &i.StudentID, &i.TeacherID)
	return i, err
}

const getCommonRegistrationsByTeachersEmail = `-- name: GetCommonRegistrationsByTeachersEmail :many
SELECT s.email
FROM students s
         JOIN registrations r ON s.id = r.student_id
         JOIN teachers t ON t.id = r.teacher_id
WHERE t.email = ANY($1)
GROUP BY s.id
HAVING COUNT(DISTINCT t.id) = $2
`

type GetCommonRegistrationsByTeachersEmailParams struct {
	Email string
	ID    int32
}

func (q *Queries) GetCommonRegistrationsByTeachersEmail(ctx context.Context, arg GetCommonRegistrationsByTeachersEmailParams) ([]string, error) {
	rows, err := q.db.Query(ctx, getCommonRegistrationsByTeachersEmail, arg.Email, arg.ID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var email string
		if err := rows.Scan(&email); err != nil {
			return nil, err
		}
		items = append(items, email)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRegistrationsByTeacherEmail = `-- name: GetRegistrationsByTeacherEmail :many
SELECT s.email
FROM registrations e
         JOIN students s ON e.student_id = s.id
         JOIN teachers t ON e.teacher_id = t.id
WHERE t.email = $1
`

func (q *Queries) GetRegistrationsByTeacherEmail(ctx context.Context, email string) ([]string, error) {
	rows, err := q.db.Query(ctx, getRegistrationsByTeacherEmail, email)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var email string
		if err := rows.Scan(&email); err != nil {
			return nil, err
		}
		items = append(items, email)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUnsuspendedRegistrationsByTeacherEmail = `-- name: GetUnsuspendedRegistrationsByTeacherEmail :many
SELECT s.email
FROM registrations e
         JOIN students s ON e.student_id = s.id
         JOIN teachers t ON e.teacher_id = t.id
WHERE t.email = $1 and s.is_suspended = false
`

func (q *Queries) GetUnsuspendedRegistrationsByTeacherEmail(ctx context.Context, email string) ([]string, error) {
	rows, err := q.db.Query(ctx, getUnsuspendedRegistrationsByTeacherEmail, email)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var email string
		if err := rows.Scan(&email); err != nil {
			return nil, err
		}
		items = append(items, email)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
