// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: students.sql

package sqlc

import (
	"context"
)

const createStudent = `-- name: CreateStudent :one
insert into students
(name, email)
values
    ($1 , $2)
    returning id, name, email, is_suspended
`

type CreateStudentParams struct {
	Name  string
	Email string
}

func (q *Queries) CreateStudent(ctx context.Context, arg CreateStudentParams) (Student, error) {
	row := q.db.QueryRow(ctx, createStudent, arg.Name, arg.Email)
	var i Student
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.IsSuspended,
	)
	return i, err
}

const getStudentByEmail = `-- name: GetStudentByEmail :one
select id, name, email, is_suspended
from students
where email = $1
`

func (q *Queries) GetStudentByEmail(ctx context.Context, email string) (Student, error) {
	row := q.db.QueryRow(ctx, getStudentByEmail, email)
	var i Student
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.IsSuspended,
	)
	return i, err
}

const getStudentById = `-- name: GetStudentById :one
select id, name, email, is_suspended
from students
where id = $1
`

func (q *Queries) GetStudentById(ctx context.Context, id int32) (Student, error) {
	row := q.db.QueryRow(ctx, getStudentById, id)
	var i Student
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.IsSuspended,
	)
	return i, err
}

const getStudentEmailsByIds = `-- name: GetStudentEmailsByIds :many
SELECT email FROM students WHERE id = ANY($1)
`

func (q *Queries) GetStudentEmailsByIds(ctx context.Context, id int32) ([]string, error) {
	rows, err := q.db.Query(ctx, getStudentEmailsByIds, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var email string
		if err := rows.Scan(&email); err != nil {
			return nil, err
		}
		items = append(items, email)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateStudentSuspensionByEmail = `-- name: UpdateStudentSuspensionByEmail :one
update students
set is_suspended = $2
where email = $1
returning id, name, email, is_suspended
`

type UpdateStudentSuspensionByEmailParams struct {
	Email       string
	IsSuspended bool
}

func (q *Queries) UpdateStudentSuspensionByEmail(ctx context.Context, arg UpdateStudentSuspensionByEmailParams) (Student, error) {
	row := q.db.QueryRow(ctx, updateStudentSuspensionByEmail, arg.Email, arg.IsSuspended)
	var i Student
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.IsSuspended,
	)
	return i, err
}
