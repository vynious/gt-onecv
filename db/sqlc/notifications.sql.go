// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: notifications.sql

package sqlc

import (
	"context"
)

const createNotification = `-- name: CreateNotification :one
insert into notifications
(teacher_id, content)
values
    ($1, $2)
returning id, teacher_id, content
`

type CreateNotificationParams struct {
	TeacherID int32
	Content   string
}

func (q *Queries) CreateNotification(ctx context.Context, arg CreateNotificationParams) (Notification, error) {
	row := q.db.QueryRow(ctx, createNotification, arg.TeacherID, arg.Content)
	var i Notification
	err := row.Scan(&i.ID, &i.TeacherID, &i.Content)
	return i, err
}

const getEligibleRecipients = `-- name: GetEligibleRecipients :many
SELECT DISTINCT s.email
FROM students s
WHERE NOT s.is_suspended
  AND (
    s.id IN (
        SELECT e.student_id
        FROM registrations  e
                 JOIN teachers t ON e.teacher_id = t.id
        WHERE t.email = $1
    )
        OR s.email = ANY($2)
    )
`

type GetEligibleRecipientsParams struct {
	Email   string
	Email_2 string
}

func (q *Queries) GetEligibleRecipients(ctx context.Context, arg GetEligibleRecipientsParams) ([]string, error) {
	rows, err := q.db.Query(ctx, getEligibleRecipients, arg.Email, arg.Email_2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var email string
		if err := rows.Scan(&email); err != nil {
			return nil, err
		}
		items = append(items, email)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
